@override
void initState() {
  super.initState();
  remainingSeconds = widget.duration * 60;
  initializeNotifications();
  requestNotificationPermission();
  startTimer();
}

/// 🔔 Initialize notifications with proper action handling
void initializeNotifications() {
  const AndroidInitializationSettings initializationSettingsAndroid =
      AndroidInitializationSettings('@mipmap/ic_launcher');
  final InitializationSettings initializationSettings =
      InitializationSettings(
    android: initializationSettingsAndroid,
  );

  flutterLocalNotificationsPlugin.initialize(
    initializationSettings,
    onDidReceiveNotificationResponse: (NotificationResponse response) async {
      if (response.actionId == 'resume') {
        resumeTimer();
      } else if (response.actionId == 'terminate') {
        terminateMeditation();
      }
    },
  );
}

/// 🟢 Request notification permission (for Android 13+)
void requestNotificationPermission() async {
  if (await Permission.notification.isDenied) {
    await Permission.notification.request();
  }
}

/// ⏳ Start timer & show notification if paused
void startTimer() {
  countdownTimer = Timer.periodic(Duration(seconds: 1), (timer) {
    if (remainingSeconds > 0) {
      setState(() => remainingSeconds--);

      if (isPaused) {
        showNotification(); // Only notify if paused
      }
    } else {
      timer.cancel();
      playAlarm();
    }
  });
}

/// 🏁 Pause & Resume Controls
void pauseTimer() {
  setState(() => isPaused = true);
  showNotification(); // Show notification when paused
}

void resumeTimer() {
  setState(() => isPaused = false);
  startTimer(); // Resume timer
  flutterLocalNotificationsPlugin.cancel(0); // Remove notification
}

void terminateMeditation() {
  countdownTimer?.cancel();
  Navigator.pop(context); // Exit meditation page
  flutterLocalNotificationsPlugin.cancel(0); // Remove notification
}

/// 🔔 Show a notification with working actions
void showNotification() async {
  const AndroidNotificationDetails androidPlatformChannelSpecifics =
      AndroidNotificationDetails(
    'meditation_channel',
    'Meditation Timer',
    channelDescription: 'Shows the remaining time for meditation',
    importance: Importance.max,
    priority: Priority.high,
    showWhen: false,
    actions: <AndroidNotificationAction>[
      AndroidNotificationAction(
        'resume', // Must match `actionId` in the callback
        'Resume',
        showsUserInterface: true,
      ),
      AndroidNotificationAction(
        'terminate',
        'Terminate',
        showsUserInterface: true,
      ),
    ],
  );

  const NotificationDetails platformChannelSpecifics =
      NotificationDetails(android: androidPlatformChannelSpecifics);

  await flutterLocalNotificationsPlugin.show(
    0,
    'Meditation Timer',
    'Time remaining: ${remainingSeconds ~/ 60}:${(remainingSeconds % 60).toString().padLeft(2, '0')}',
    platformChannelSpecifics,
  );
}